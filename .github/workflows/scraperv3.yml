name: scraperv3

on:
  schedule:
    - cron: "0 4 * * 2" # in the midnight Monday to Tuesday UTC-4 (Tuesday at 04.00 AM UTC)
    - cron: "0 4 * * 4" # Thursday
    - cron: "0 4 * * 6" # Saturday

# Add concurrency control to prevent simultaneous workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  scraping:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch complete history

      # [Your existing Python setup steps]

      - name: Commit result
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch latest changes
          git fetch origin main

          # Ensure we're on main branch
          git checkout main

          # Reset to match remote main
          git reset --hard origin/main

          # Apply changes
          git add history/*.json

          # Create commit if there are changes
          timestamp=$(TZ='America/New_York' date +'%a, %F at %H:%M %Z')
          if git diff --staged --quiet; then
            echo "No changes to scraping data"
            exit 0
          else
            git commit -m "Scraping updated: ${timestamp}"
            # Push with retries
            for i in {1..3}; do
              if git pull --rebase && git push; then
                echo "Push successful"
                break
              else
                echo "Push attempt $i failed, retrying..."
                sleep 5
              fi
            done
          fi

  forwarding:
    runs-on: ubuntu-latest
    needs: scraping

    steps:
      # [Your existing R setup steps]

      - name: Commit data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch latest changes
          git fetch origin main

          # Ensure we're on main branch
          git checkout main

          # Reset to match remote main
          git reset --hard origin/main

          # Apply changes
          git add *.rds history/foreclose/*.csv history/taxdeed/*.csv

          # Create commit if there are changes
          timestamp=$(TZ='America/New_York' date +'%a, %F at %H:%M %Z')
          if git diff --staged --quiet; then
            echo "No changes to processed data"
            exit 0
          else
            git commit -m "Data updated: ${timestamp}"
            # Push with retries
            for i in {1..3}; do
              if git pull --rebase && git push; then
                echo "Push successful"
                break
              else
                echo "Push attempt $i failed, retrying..."
                sleep 5
              fi
            done
          fi
